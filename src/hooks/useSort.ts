import {useEffect, useState} from "react";import {filteringUserByPage} from "../utils/utils";import {IUser} from "../types/IUser";export const useSort = (users: IUser[]) => {  const [selectedSort, setSelectedSort] = useState('id')  const [searchUser, setSearchUser] = useState<string>('')  const [visibleUsers, setVisibleUsers] = useState<IUser[]>([])  const [pageCount, setPageCount] = useState<number>(0)  const getSortedUser = () => {    if (selectedSort) {      if (selectedSort === 'id') {        return [...users]?.sort((a, b) => +a[selectedSort] - (+b[selectedSort]))      }      return [...users]?.sort((a, b) => a[selectedSort].localeCompare(b[selectedSort]))    }    return users  }  let sortedUser: IUser[] = getSortedUser()  const sortedAndSearchedUser = () => {    return sortedUser.filter(user => user.name.toLowerCase().includes(searchUser.toLowerCase()))  }  useEffect(() => {    if (sortedAndSearchedUser()) {      setVisibleUsers(filteringUserByPage(pageCount, sortedAndSearchedUser()))    }    // eslint-disable-next-line  }, [pageCount, selectedSort, searchUser, users])  const totalPage = (Math.ceil(sortedAndSearchedUser().length / 4) - 1) <= 0 ? 0 : Math.ceil(sortedAndSearchedUser().length / 4) - 1  return {pageCount, setPageCount, selectedSort, setSelectedSort, searchUser, setSearchUser, visibleUsers, totalPage}}